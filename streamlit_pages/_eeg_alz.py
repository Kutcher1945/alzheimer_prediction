import streamlit as st
import numpy as np
import tensorflow as tf
from tensorflow.keras.models import load_model
from PIL import Image, ImageOps
import cv2
import os

# –û—Ç–∫–ª—é—á–∞–µ–º GPU, –µ—Å–ª–∏ –æ–Ω –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è
try:
    tf.config.experimental.set_visible_devices([], "GPU")
except:
    pass

def eeg_alz():
    st.title("üß† –ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ –±–æ–ª–µ–∑–Ω–∏ –ê–ª—å—Ü–≥–µ–π–º–µ—Ä–∞")
    
    # –ó–∞–≥—Ä—É–∑–∫–∞ –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    image_path = 'assets/images/image_presentation.jpg'
    if os.path.exists(image_path):
        image = Image.open(image_path)
        st.image(image, caption='–ú–†–¢-—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–∑–≥–∞')

    st.subheader("üîç –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –¥–∏–∞–≥–Ω–æ–∑–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ú–†–¢-–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–∞—Ü–∏–µ–Ω—Ç–∞")
    st.write("–≠—Ç–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –º–æ–¥–µ–ª—å **CNN** –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π.")

    # –ü—É—Ç–∏ –∫ –º–æ–¥–µ–ª—è–º
    model_paths = ["model/model_kaggle_alzheimer.h5", "model/model_kaggle_alzheimer.keras"]

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –º–æ–¥–µ–ª–∏ –∏ –∑–∞–≥—Ä—É–∑–∫–∞
    model = None
    for path in model_paths:
        if os.path.exists(path):
            try:
                model = load_model(path)
                st.success(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–∞ –º–æ–¥–µ–ª—å: `{path}`")
                break
            except Exception as e:
                st.warning(f"‚ö† –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–∏ `{path}`: {e}")

    if model is None:
        st.error("‚ùå –§–∞–π–ª –º–æ–¥–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –º–æ–¥–µ–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –≤ –ø–∞–ø–∫—É `model/`.")
        return

    # –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    file = st.file_uploader("üìÇ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ –ú–†–¢-–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.", type=["jpg", "png"])

    def import_and_predict(image_data, model):
        try:
            size = (128, 128)  # –†–∞–∑–º–µ—Ä –≤—Ö–æ–¥–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            image = ImageOps.fit(image_data, size, Image.Resampling.LANCZOS)  # –£–ª—É—á—à–µ–Ω–Ω–æ–µ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ
            image = np.asarray(image)

            # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ RGB (–Ω–∞ —Å–ª—É—á–∞–π —á/–± –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π)
            if len(image.shape) == 2:
                image = cv2.cvtColor(image, cv2.COLOR_GRAY2RGB)
            elif image.shape[-1] == 4:  # –ï—Å–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ RGBA, —É–¥–∞–ª—è–µ–º –∞–ª—å—Ñ–∞-–∫–∞–Ω–∞–ª
                image = cv2.cvtColor(image, cv2.COLOR_RGBA2RGB)

            img_reshape = image[np.newaxis, ...]  # –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞–∑–º–µ—Ä–Ω–æ—Å—Ç—å batch
            prediction = model.predict(img_reshape)
            return prediction
        except Exception as e:
            st.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
            return None

    if file:
        image = Image.open(file)
        predictions = import_and_predict(image, model)

        if predictions is not None:
            class_names = ["–õ—ë–≥–∫–∞—è –¥–µ–º–µ–Ω—Ü–∏—è", "–£–º–µ—Ä–µ–Ω–Ω–∞—è –¥–µ–º–µ–Ω—Ü–∏—è", "–ë–µ–∑ –¥–µ–º–µ–Ω—Ü–∏–∏", "–û—á–µ–Ω—å –ª—ë–≥–∫–∞—è –¥–µ–º–µ–Ω—Ü–∏—è"]
            predicted_class = class_names[np.argmax(predictions)]
            st.success(f"üß† **–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω—ã–π –¥–∏–∞–≥–Ω–æ–∑ –ø–∞—Ü–∏–µ–Ω—Ç–∞:** {predicted_class}")
            st.image(image, caption="üì∑ –ó–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")
